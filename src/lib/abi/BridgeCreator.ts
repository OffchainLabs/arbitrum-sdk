/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ISequencerInbox {
  export type MaxTimeVariationStruct = {
    delayBlocks: BigNumberish;
    futureBlocks: BigNumberish;
    delaySeconds: BigNumberish;
    futureSeconds: BigNumberish;
  };

  export type MaxTimeVariationStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    delayBlocks: BigNumber;
    futureBlocks: BigNumber;
    delaySeconds: BigNumber;
    futureSeconds: BigNumber;
  };
}

export interface BridgeCreatorInterface extends utils.Interface {
  contractName: "BridgeCreator";
  functions: {
    "bridgeTemplate()": FunctionFragment;
    "createBridge(address,address,(uint256,uint256,uint256,uint256))": FunctionFragment;
    "inboxTemplate()": FunctionFragment;
    "outboxTemplate()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rollupEventInboxTemplate()": FunctionFragment;
    "sequencerInboxTemplate()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTemplates(address,address,address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bridgeTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBridge",
    values: [string, string, ISequencerInbox.MaxTimeVariationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "inboxTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outboxTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollupEventInboxTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerInboxTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTemplates",
    values: [string, string, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inboxTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outboxTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupEventInboxTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequencerInboxTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTemplates",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TemplatesUpdated()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TemplatesUpdated"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TemplatesUpdatedEvent = TypedEvent<[], {}>;

export type TemplatesUpdatedEventFilter =
  TypedEventFilter<TemplatesUpdatedEvent>;

export interface BridgeCreator extends BaseContract {
  contractName: "BridgeCreator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeCreatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeTemplate(overrides?: CallOverrides): Promise<[string]>;

    createBridge(
      adminProxy: string,
      rollup: string,
      maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inboxTemplate(overrides?: CallOverrides): Promise<[string]>;

    outboxTemplate(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollupEventInboxTemplate(overrides?: CallOverrides): Promise<[string]>;

    sequencerInboxTemplate(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTemplates(
      _bridgeTemplate: string,
      _sequencerInboxTemplate: string,
      _inboxTemplate: string,
      _rollupEventInboxTemplate: string,
      _outboxTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bridgeTemplate(overrides?: CallOverrides): Promise<string>;

  createBridge(
    adminProxy: string,
    rollup: string,
    maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inboxTemplate(overrides?: CallOverrides): Promise<string>;

  outboxTemplate(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollupEventInboxTemplate(overrides?: CallOverrides): Promise<string>;

  sequencerInboxTemplate(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTemplates(
    _bridgeTemplate: string,
    _sequencerInboxTemplate: string,
    _inboxTemplate: string,
    _rollupEventInboxTemplate: string,
    _outboxTemplate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridgeTemplate(overrides?: CallOverrides): Promise<string>;

    createBridge(
      adminProxy: string,
      rollup: string,
      maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    inboxTemplate(overrides?: CallOverrides): Promise<string>;

    outboxTemplate(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rollupEventInboxTemplate(overrides?: CallOverrides): Promise<string>;

    sequencerInboxTemplate(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTemplates(
      _bridgeTemplate: string,
      _sequencerInboxTemplate: string,
      _inboxTemplate: string,
      _rollupEventInboxTemplate: string,
      _outboxTemplate: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TemplatesUpdated()"(): TemplatesUpdatedEventFilter;
    TemplatesUpdated(): TemplatesUpdatedEventFilter;
  };

  estimateGas: {
    bridgeTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    createBridge(
      adminProxy: string,
      rollup: string,
      maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inboxTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    outboxTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollupEventInboxTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerInboxTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTemplates(
      _bridgeTemplate: string,
      _sequencerInboxTemplate: string,
      _inboxTemplate: string,
      _rollupEventInboxTemplate: string,
      _outboxTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createBridge(
      adminProxy: string,
      rollup: string,
      maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inboxTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outboxTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollupEventInboxTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sequencerInboxTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTemplates(
      _bridgeTemplate: string,
      _sequencerInboxTemplate: string,
      _inboxTemplate: string,
      _rollupEventInboxTemplate: string,
      _outboxTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
