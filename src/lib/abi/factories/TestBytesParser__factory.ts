/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestBytesParser,
  TestBytesParserInterface,
} from "../TestBytesParser";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
    ],
    name: "bytesToString",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "string",
        name: "res",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
    ],
    name: "bytesToUint8",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061051c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806339614e4f1461003b5780633c74a7ab14610065575b600080fd5b61004e6100493660046102fb565b610091565b60405161005c92919061039f565b60405180910390f35b6100786100733660046102fb565b6100a7565b60408051921515835260ff90911660208301520161005c565b6000606061009e836100b3565b91509150915091565b60008061009e8361023d565b6000606082516000036100c95760009150915091565b825160200361021d5782516000908490601f9081106100ea576100ea6103db565b01602001516001600160f81b031916146101075760009150915091565b6001915060205b6000811180156101485750600084610127600184610407565b81518110610137576101376103db565b01602001516001600160f81b031916145b1561015f578061015781610420565b91505061010e565b60008167ffffffffffffffff81111561017a5761017a61028c565b6040519080825280601f01601f1916602001820160405280156101a4576020820181803683370190505b50905060005b828160ff16101561021357858160ff16815181106101ca576101ca6103db565b602001015160f81c60f81b828260ff16815181106101ea576101ea6103db565b60200101906001600160f81b031916908160001a9053508061020b81610437565b9150506101aa565b5091506102389050565b60019150828060200190518101906102359190610456565b90505b915091565b600080825160201461025457506000928392509050565b60008380602001905181019061026a91906104cd565b905060ff8111156102815750600093849350915050565b600194909350915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156102cb576102cb61028c565b604052919050565b600067ffffffffffffffff8211156102ed576102ed61028c565b50601f01601f191660200190565b60006020828403121561030d57600080fd5b813567ffffffffffffffff81111561032457600080fd5b8201601f8101841361033557600080fd5b8035610348610343826102d3565b6102a2565b81815285602083850101111561035d57600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b8381101561039657818101518382015260200161037e565b50506000910152565b821515815260406020820152600082518060408401526103c681606085016020870161037b565b601f01601f1916919091016060019392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561041a5761041a6103f1565b92915050565b60008161042f5761042f6103f1565b506000190190565b600060ff821660ff810361044d5761044d6103f1565b60010192915050565b60006020828403121561046857600080fd5b815167ffffffffffffffff81111561047f57600080fd5b8201601f8101841361049057600080fd5b805161049e610343826102d3565b8181528560208385010111156104b357600080fd5b6104c482602083016020860161037b565b95945050505050565b6000602082840312156104df57600080fd5b505191905056fea26469706673582212206b4c4f6b9b2bf901e9c55babd0df521a539735a6435a68fdc8df30160ba8352a64736f6c63430008100033";

type TestBytesParserConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestBytesParserConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestBytesParser__factory extends ContractFactory {
  constructor(...args: TestBytesParserConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TestBytesParser";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestBytesParser> {
    return super.deploy(overrides || {}) as Promise<TestBytesParser>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestBytesParser {
    return super.attach(address) as TestBytesParser;
  }
  connect(signer: Signer): TestBytesParser__factory {
    return super.connect(signer) as TestBytesParser__factory;
  }
  static readonly contractName: "TestBytesParser";
  public readonly contractName: "TestBytesParser";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestBytesParserInterface {
    return new utils.Interface(_abi) as TestBytesParserInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestBytesParser {
    return new Contract(address, _abi, signerOrProvider) as TestBytesParser;
  }
}
