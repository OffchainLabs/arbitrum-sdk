/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RollupMock, RollupMockInterface } from "../RollupMock";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "WithdrawTriggered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ZombieTriggered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "removeOldZombies",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawStakerFunds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061010b806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806361373919146037578063edfd03ed14604f575b600080fd5b603d6060565b60405190815260200160405180910390f35b605e605a36600460bd565b6091565b005b6040516000907f1c09fbbf7cfd024f5e4e5472dd87afd5d67ee5db6a0ca715bf508d96abce309f908290a150600090565b6040517fb774f793432a37585a7638b9afe49e91c478887a2c0fef32877508bf2f76429d90600090a150565b60006020828403121560ce57600080fd5b503591905056fea2646970667358221220fc39311811243901a9c107ebde51901d4627af7b8772f5f283e44615c1991ed364736f6c63430008090033";

type RollupMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RollupMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RollupMock__factory extends ContractFactory {
  constructor(...args: RollupMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RollupMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RollupMock> {
    return super.deploy(overrides || {}) as Promise<RollupMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RollupMock {
    return super.attach(address) as RollupMock;
  }
  connect(signer: Signer): RollupMock__factory {
    return super.connect(signer) as RollupMock__factory;
  }
  static readonly contractName: "RollupMock";
  public readonly contractName: "RollupMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RollupMockInterface {
    return new utils.Interface(_abi) as RollupMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RollupMock {
    return new Contract(address, _abi, signerOrProvider) as RollupMock;
  }
}
