/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SimpleProxy, SimpleProxyInterface } from "../SimpleProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "impl_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161011d38038061011d83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051609561008860003960006017015260956000f3fe608060405236601057600e6013565b005b600e5b603a7f0000000000000000000000000000000000000000000000000000000000000000603c565b565b3660008037600080366000845af43d6000803e808015605a573d6000f35b3d6000fdfea2646970667358221220e43be84fa15ca710e6571e110b5a4d8880a4fb1530e229a8d070890cb041ff6b64736f6c63430008090033";

type SimpleProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleProxy__factory extends ContractFactory {
  constructor(...args: SimpleProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SimpleProxy";
  }

  deploy(
    impl_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SimpleProxy> {
    return super.deploy(impl_, overrides || {}) as Promise<SimpleProxy>;
  }
  getDeployTransaction(
    impl_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(impl_, overrides || {});
  }
  attach(address: string): SimpleProxy {
    return super.attach(address) as SimpleProxy;
  }
  connect(signer: Signer): SimpleProxy__factory {
    return super.connect(signer) as SimpleProxy__factory;
  }
  static readonly contractName: "SimpleProxy";
  public readonly contractName: "SimpleProxy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleProxyInterface {
    return new utils.Interface(_abi) as SimpleProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleProxy {
    return new Contract(address, _abi, signerOrProvider) as SimpleProxy;
  }
}
