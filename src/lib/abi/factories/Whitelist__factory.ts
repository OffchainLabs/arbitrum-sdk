/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Whitelist, WhitelistInterface } from "../Whitelist";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newWhitelist",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
    ],
    name: "WhitelistUpgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "user",
        type: "address[]",
      },
      {
        internalType: "bool[]",
        name: "val",
        type: "bool[]",
      },
    ],
    name: "setWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newWhitelist",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
    ],
    name: "triggerConsumers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556106a4806100326000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806313af40351461005c57806337ca2617146100715780633b99adf7146100845780638da5cb5b14610097578063babcc539146100c0575b600080fd5b61006f61006a366004610386565b6100f3565b005b61006f61007f366004610485565b61017c565b61006f6100923660046104d3565b61027a565b6000546100aa906001600160a01b031681565b6040516100b7919061059d565b60405180910390f35b6100e36100ce366004610386565b60016020526000908152604090205460ff1681565b60405190151581526020016100b7565b6000546001600160a01b031633146101265760405162461bcd60e51b815260040161011d906105b1565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0383161790556040517f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b9061017190839061059d565b60405180910390a150565b6000546001600160a01b031633146101a65760405162461bcd60e51b815260040161011d906105b1565b60005b815181101561023c578181815181106101c4576101c46105d5565b60200260200101516001600160a01b03166347466f98846040518263ffffffff1660e01b81526004016101f7919061059d565b600060405180830381600087803b15801561021157600080fd5b505af1158015610225573d6000803e3d6000fd5b505050508080610234906105eb565b9150506101a9565b507fd86884520a0656812619831f2b97aa7c77f8064735a7c312f358b9943d30eb78828260405161026e929190610612565b60405180910390a15050565b6000546001600160a01b031633146102a45760405162461bcd60e51b815260040161011d906105b1565b80518251146102e55760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b604482015260640161011d565b60005b825181101561036557818181518110610303576103036105d5565b602002602001015160016000858481518110610321576103216105d5565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061035d816105eb565b9150506102e8565b505050565b80356001600160a01b038116811461038157600080fd5b919050565b60006020828403121561039857600080fd5b6103a18261036a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156103e7576103e76103a8565b604052919050565b600067ffffffffffffffff821115610409576104096103a8565b5060051b60200190565b600082601f83011261042457600080fd5b81356020610439610434836103ef565b6103be565b82815260059290921b8401810191818101908684111561045857600080fd5b8286015b8481101561047a5761046d8161036a565b835291830191830161045c565b509695505050505050565b6000806040838503121561049857600080fd5b6104a18361036a565b9150602083013567ffffffffffffffff8111156104bd57600080fd5b6104c985828601610413565b9150509250929050565b600080604083850312156104e657600080fd5b823567ffffffffffffffff808211156104fe57600080fd5b61050a86838701610413565b935060209150818501358181111561052157600080fd5b85019050601f8101861361053457600080fd5b8035610542610434826103ef565b81815260059190911b8201830190838101908883111561056157600080fd5b928401925b8284101561058e578335801515811461057f5760008081fd5b82529284019290840190610566565b80955050505050509250929050565b6001600160a01b0391909116815260200190565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006001820161060b57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b81811015610660578551851683529483019491830191600101610642565b50909897505050505050505056fea2646970667358221220bab222cc84b8932b23108557bf16fd7473e084ac65a3c977f74e43860b18b76e64736f6c63430008100033";

type WhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Whitelist__factory extends ContractFactory {
  constructor(...args: WhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Whitelist";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Whitelist> {
    return super.deploy(overrides || {}) as Promise<Whitelist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Whitelist {
    return super.attach(address) as Whitelist;
  }
  connect(signer: Signer): Whitelist__factory {
    return super.connect(signer) as Whitelist__factory;
  }
  static readonly contractName: "Whitelist";
  public readonly contractName: "Whitelist";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistInterface {
    return new utils.Interface(_abi) as WhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Whitelist {
    return new Contract(address, _abi, signerOrProvider) as Whitelist;
  }
}
