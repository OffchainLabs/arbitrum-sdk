/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OutboxWithoutOptTester,
  OutboxWithoutOptTesterInterface,
} from "../OutboxWithoutOptTester";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "AlreadySpent",
    type: "error",
  },
  {
    inputs: [],
    name: "BridgeCallFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "actualLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxProofLength",
        type: "uint256",
      },
    ],
    name: "MerkleProofTooLong",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxIndex",
        type: "uint256",
      },
    ],
    name: "PathNotMinimal",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proofLength",
        type: "uint256",
      },
    ],
    name: "ProofTooLong",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
    ],
    name: "UnknownRoot",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "l2Sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "zero",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "transactionIndex",
        type: "uint256",
      },
    ],
    name: "OutBoxTransactionExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "outputRoot",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "l2BlockHash",
        type: "bytes32",
      },
    ],
    name: "SendRootUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "OUTBOX_VERSION",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "contract IBridge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "l2Sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "l2Block",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "l1Block",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "l2Timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "calculateItemHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "path",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "item",
        type: "bytes32",
      },
    ],
    name: "calculateMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "l2Sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "l2Block",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "l1Block",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "l2Timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "executeTransactionSimulation",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IBridge",
        name: "_bridge",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "isSpent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1BatchNum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1Block",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1EthBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1OutputId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1Sender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1Timestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rollup",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "spent",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "l2BlockHash",
        type: "bytes32",
      },
    ],
    name: "updateSendRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b5060805161113861002d600039600050506111386000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639f0c04bf116100925780639f0c04bf146101d8578063a04cee60146101eb578063ae6dead7146101fe578063b0f305371461021e578063c4d66de81461022f578063c75184df14610242578063cb23bcb514610262578063d5b5cc2314610275578063e78cea921461028857600080fd5b80627436d3146100fa57806308635a95146101205780631198527114610135578063288e5b101461013c578063465477901461014f5780635a129efe1461016057806372f2a8c71461019357806380648b021461019b5780638515bc6a146101c0575b600080fd5b61010d610108366004610aa6565b61029b565b6040519081526020015b60405180910390f35b61013361012e366004610bcb565b6102d8565b005b600061010d565b61013361014a366004610cbf565b61061a565b6004546001600160801b031661010d565b61018361016e366004610d5a565b60026020526000908152604090205460ff1681565b6040519015158152602001610117565b60065461010d565b6007546001600160a01b03165b6040516001600160a01b039091168152602001610117565b600454600160801b90046001600160801b031661010d565b61010d6101e6366004610d73565b610659565b6101336101f9366004610e01565b61069e565b61010d61020c366004610d5a565b60036020526000908152604090205481565b6005546001600160801b031661010d565b61013361023d366004610e23565b6106dd565b61024a600281565b6040516001600160801b039091168152602001610117565b6000546101a8906001600160a01b031681565b61010d610283366004610d5a565b6107b6565b6001546101a8906001600160a01b031681565b60006102d08484846040516020016102b591815260200190565b604051602081830303815290604052805190602001206107f2565b949350505050565b6000806102eb8a8a8a8a8a8a8a8a610659565b905061032d8d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508f92508591506108959050565b915060008a6001600160a01b03168a6001600160a01b03167f20af7f3bbfe38132b8900ae295cd9c8d1914be7052d061a511f3f728dab189648e60405161037691815260200190565b60405180910390a450600060046040518060a00160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152505090506040518060a00160405280896001600160801b03168152602001886001600160801b03168152602001876001600160801b031681526020018381526020018b6001600160a01b0316815250600460008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a8154816001600160801b0302191690836001600160801b0316021790555060408201518160010160006101000a8154816001600160801b0302191690836001600160801b031602179055506060820151816002015560808201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506105a5898686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061099892505050565b805160208201516001600160801b03918216600160801b91831691909102176004556040820151600580546001600160801b03191691909216179055606081015160065560800151600780546001600160a01b0319166001600160a01b03909216919091179055505050505050505050505050565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b5c1b195b595b9d1959608a1b60448201526064015b60405180910390fd5b6000888888888888888860405160200161067a989796959493929190610e47565b60405160208183030381529060405280519060200120905098975050505050505050565b60008281526003602052604080822083905551829184917fb4df3847300f076a369cd76d2314b470a1194d9e8a6bb97f1860aee88a5f67489190a35050565b6001546001600160a01b03161561070757604051633bcd329760e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040805163cb23bcb560e01b8152905163cb23bcb591600480820192602092909190829003018186803b15801561075b57600080fd5b505afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190610ea0565b600080546001600160a01b0319166001600160a01b039290921691909117905550565b60405162461bcd60e51b815260206004820152600e60248201526d1393d517d253541311535155115160921b6044820152600090606401610650565b825160009061010081111561082557604051637ed6198f60e11b8152600481018290526101006024820152604401610650565b8260005b8281101561088b57600087828151811061084557610845610ebd565b60200260200101519050816001901b87166000141561087257826000528060205260406000209250610882565b8060005282602052604060002092505b50600101610829565b5095945050505050565b60006101008451106108bf57835160405163ab6a068360e01b815260040161065091815260200190565b83516108cc906002610fcf565b83106109035782845160026108e19190610fcf565b604051630b8a724b60e01b815260048101929092526024820152604401610650565b600061091085858561029b565b600081815260036020526040902054909150610942576040516310e61af960e31b815260048101829052602401610650565b60008481526002602052604090205460ff161561097557604051639715b8d360e01b815260048101859052602401610650565b50506000828152600260205260409020805460ff19166001179055819392505050565b600154604051639e5d4c4960e01b815260009182916001600160a01b0390911690639e5d4c49906109d19088908890889060040161100b565b600060405180830381600087803b1580156109eb57600080fd5b505af11580156109ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a279190810190611054565b9150915081610a5957805115610a405780518082602001fd5b604051631bb7daad60e11b815260040160405180910390fd5b5050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610a9e57610a9e610a60565b604052919050565b600080600060608486031215610abb57600080fd5b83356001600160401b0380821115610ad257600080fd5b818601915086601f830112610ae657600080fd5b8135602082821115610afa57610afa610a60565b8160051b9250610b0b818401610a76565b828152928401810192818101908a851115610b2557600080fd5b948201945b84861015610b4357853582529482019490820190610b2a565b9a918901359950506040909701359695505050505050565b6001600160a01b0381168114610b7057600080fd5b50565b8035610b7e81610b5b565b919050565b60008083601f840112610b9557600080fd5b5081356001600160401b03811115610bac57600080fd5b602083019150836020828501011115610bc457600080fd5b9250929050565b60008060008060008060008060008060006101208c8e031215610bed57600080fd5b8b356001600160401b0380821115610c0457600080fd5b818e0191508e601f830112610c1857600080fd5b813581811115610c2757600080fd5b8f60208260051b8501011115610c3c57600080fd5b60208381019e50909c508e01359a50610c5760408f01610b73565b9950610c6560608f01610b73565b985060808e0135975060a08e0135965060c08e0135955060e08e013594506101008e0135915080821115610c9857600080fd5b50610ca58e828f01610b83565b915080935050809150509295989b509295989b9093969950565b60008060008060008060008060006101008a8c031215610cde57600080fd5b8935985060208a0135610cf081610b5b565b975060408a0135610d0081610b5b565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356001600160401b03811115610d3757600080fd5b610d438c828d01610b83565b915080935050809150509295985092959850929598565b600060208284031215610d6c57600080fd5b5035919050565b60008060008060008060008060e0898b031215610d8f57600080fd5b8835610d9a81610b5b565b97506020890135610daa81610b5b565b965060408901359550606089013594506080890135935060a0890135925060c08901356001600160401b03811115610de157600080fd5b610ded8b828c01610b83565b999c989b5096995094979396929594505050565b60008060408385031215610e1457600080fd5b50508035926020909101359150565b600060208284031215610e3557600080fd5b8135610e4081610b5b565b9392505050565b60006bffffffffffffffffffffffff19808b60601b168352808a60601b16601484015250876028830152866048830152856068830152846088830152828460a8840137506000910160a801908152979650505050505050565b600060208284031215610eb257600080fd5b8151610e4081610b5b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610f24578160001904821115610f0a57610f0a610ed3565b80851615610f1757918102915b93841c9390800290610eee565b509250929050565b600082610f3b57506001610fc9565b81610f4857506000610fc9565b8160018114610f5e5760028114610f6857610f84565b6001915050610fc9565b60ff841115610f7957610f79610ed3565b50506001821b610fc9565b5060208310610133831016604e8410600b8410161715610fa7575081810a610fc9565b610fb18383610ee9565b8060001904821115610fc557610fc5610ed3565b0290505b92915050565b6000610e408383610f2c565b60005b83811015610ff6578181015183820152602001610fde565b83811115611005576000848401525b50505050565b60018060a01b0384168152826020820152606060408201526000825180606084015261103e816080850160208701610fdb565b601f01601f191691909101608001949350505050565b6000806040838503121561106757600080fd5b8251801515811461107757600080fd5b60208401519092506001600160401b038082111561109457600080fd5b818501915085601f8301126110a857600080fd5b8151818111156110ba576110ba610a60565b6110cd601f8201601f1916602001610a76565b91508082528660208285010111156110e457600080fd5b6110f5816020840160208601610fdb565b508092505050925092905056fea2646970667358221220f6c1a1b19ea2e91403f4d0769718d46d4a5939a356690a0bbbff8c54354676e564736f6c63430008090033";

type OutboxWithoutOptTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OutboxWithoutOptTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OutboxWithoutOptTester__factory extends ContractFactory {
  constructor(...args: OutboxWithoutOptTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "OutboxWithoutOptTester";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OutboxWithoutOptTester> {
    return super.deploy(overrides || {}) as Promise<OutboxWithoutOptTester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OutboxWithoutOptTester {
    return super.attach(address) as OutboxWithoutOptTester;
  }
  connect(signer: Signer): OutboxWithoutOptTester__factory {
    return super.connect(signer) as OutboxWithoutOptTester__factory;
  }
  static readonly contractName: "OutboxWithoutOptTester";
  public readonly contractName: "OutboxWithoutOptTester";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OutboxWithoutOptTesterInterface {
    return new utils.Interface(_abi) as OutboxWithoutOptTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OutboxWithoutOptTester {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OutboxWithoutOptTester;
  }
}
