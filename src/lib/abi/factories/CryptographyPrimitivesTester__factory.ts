/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CryptographyPrimitivesTester,
  CryptographyPrimitivesTesterInterface,
} from "../CryptographyPrimitivesTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[25]",
        name: "input",
        type: "uint256[25]",
      },
    ],
    name: "keccakF",
    outputs: [
      {
        internalType: "uint256[25]",
        name: "",
        type: "uint256[25]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[2]",
        name: "inputChunk",
        type: "bytes32[2]",
      },
      {
        internalType: "bytes32",
        name: "hashState",
        type: "bytes32",
      },
    ],
    name: "sha256Block",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "";

type CryptographyPrimitivesTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CryptographyPrimitivesTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CryptographyPrimitivesTester__factory extends ContractFactory {
  constructor(...args: CryptographyPrimitivesTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CryptographyPrimitivesTester";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CryptographyPrimitivesTester> {
    return super.deploy(
      overrides || {}
    ) as Promise<CryptographyPrimitivesTester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CryptographyPrimitivesTester {
    return super.attach(address) as CryptographyPrimitivesTester;
  }
  connect(signer: Signer): CryptographyPrimitivesTester__factory {
    return super.connect(signer) as CryptographyPrimitivesTester__factory;
  }
  static readonly contractName: "CryptographyPrimitivesTester";
  public readonly contractName: "CryptographyPrimitivesTester";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CryptographyPrimitivesTesterInterface {
    return new utils.Interface(_abi) as CryptographyPrimitivesTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CryptographyPrimitivesTester {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CryptographyPrimitivesTester;
  }
}
