/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  L1TokenBridgeRetryableSender,
  L1TokenBridgeRetryableSenderInterface,
} from "../L1TokenBridgeRetryableSender";

const _abi = [
  {
    inputs: [],
    name: "L1TokenBridgeRetryableSender_EthReceivedForFeeToken",
    type: "error",
  },
  {
    inputs: [],
    name: "L1TokenBridgeRetryableSender_RefundFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "inbox",
            type: "address",
          },
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "address",
            name: "excessFeeRefundAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "callValueRefundAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maxGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasPriceBid",
            type: "uint256",
          },
        ],
        internalType: "struct RetryableParams",
        name: "retryableParams",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "routerTemplate",
            type: "address",
          },
          {
            internalType: "address",
            name: "standardGatewayTemplate",
            type: "address",
          },
          {
            internalType: "address",
            name: "customGatewayTemplate",
            type: "address",
          },
          {
            internalType: "address",
            name: "wethGatewayTemplate",
            type: "address",
          },
          {
            internalType: "address",
            name: "wethTemplate",
            type: "address",
          },
          {
            internalType: "address",
            name: "upgradeExecutorTemplate",
            type: "address",
          },
          {
            internalType: "address",
            name: "multicallTemplate",
            type: "address",
          },
        ],
        internalType: "struct L2TemplateAddresses",
        name: "l2",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "router",
            type: "address",
          },
          {
            internalType: "address",
            name: "standardGateway",
            type: "address",
          },
          {
            internalType: "address",
            name: "customGateway",
            type: "address",
          },
          {
            internalType: "address",
            name: "wethGateway",
            type: "address",
          },
          {
            internalType: "address",
            name: "weth",
            type: "address",
          },
        ],
        internalType: "struct L1DeploymentAddresses",
        name: "l1",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "l2StandardGatewayAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "rollupOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        internalType: "address",
        name: "l1UpgradeExecutor",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isUsingFeeToken",
        type: "bool",
      },
    ],
    name: "sendRetryable",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f23806100206000396000f3fe60806040526004361061004a5760003560e01c8063715018a61461004f5780638129fc1c146100665780638da5cb5b1461007b578063d5402e89146100a7578063f2fde38b146100ba575b600080fd5b34801561005b57600080fd5b506100646100da565b005b34801561007257600080fd5b506100646100ee565b34801561008757600080fd5b50603354604080516001600160a01b039092168252519081900360200190f35b6100646100b5366004610b01565b610204565b3480156100c657600080fd5b506100646100d5366004610bc4565b610269565b6100e26102df565b6100ec6000610339565b565b600054610100900460ff161580801561010e5750600054600160ff909116105b806101285750303b158015610128575060005460ff166001145b6101905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156101b3576000805461ff0019166101001790555b6101bb61038b565b8015610201576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b61020c6102df565b61111161111160901b018201816102315761022c898989898989876103ba565b61025e565b341561025057604051630386771d60e61b815260040160405180910390fd5b61025e898989898986610725565b505050505050505050565b6102716102df565b6001600160a01b0381166102d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610187565b61020181610339565b6033546001600160a01b031633146100ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610187565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166103b25760405162461bcd60e51b815260040161018790610be6565b6100ec61091a565b6040805160e08101909152600090806103d660208a018a610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c81526020018860200160208101906104139190610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c815260200161044d60608a0160408b01610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c815260200161048760808a0160608b01610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c81526020016104c160a08a0160808b01610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c81526020016104fb60c08a0160a08b01610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c815260200161053560e08a0160c08b01610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c90526105696020880188610bc4565b6105796040890160208a01610bc4565b61058960608a0160408b01610bc4565b61059960808b0160608c01610bc4565b6105a960a08c0160808d01610bc4565b8a8a896040516024016105c499989796959493929190610c77565b60408051601f19818403018152919052602080820180516001600160e01b0316630b1c7a8760e41b179052909150600090610601908a018a610bc4565b825160405163a66b327d60e01b81526004810191909152600060248201526001600160a01b03919091169063a66b327d90604401602060405180830381865afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190610dc8565b9050600061068c60a08b013560808c0135610df7565b6106969083610e16565b90506106a48a83838661094a565b6000856001600160a01b03164760405160006040518083038185875af1925050503d80600081146106f1576040519150601f19603f3d011682016040523d82523d6000602084013e6106f6565b606091505b50509050806107185760405163b396d31d60e01b815260040160405180910390fd5b5050505050505050505050565b6040805160e08101909152600090806107416020890189610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c815260200187602001602081019061077e9190610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c81526020016107b86060890160408a01610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c81526040805160208181018352600080835281850192909252825190810183529081529082015260600161081760c0890160a08a01610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c815260200161085160e0890160c08a01610bc4565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c90526108856020870187610bc4565b6108956040880160208901610bc4565b6108a56060890160408a01610bc4565b6000808989896040516024016108c399989796959493929190610c77565b60408051601f198184030181529190526020810180516001600160e01b0316630b1c7a8760e41b1790529050600061090360a089013560808a0135610df7565b9050610910888284610a11565b5050505050505050565b600054610100900460ff166109415760405162461bcd60e51b815260040161018790610be6565b6100ec33610339565b6109576020850185610bc4565b6001600160a01b031663679b6ded836109766040880160208901610bc4565b60008761098960608b0160408c01610bc4565b61099960808c0160608d01610bc4565b8b608001358c60a001358a6040518a63ffffffff1660e01b81526004016109c7989796959493929190610e2f565b60206040518083038185885af11580156109e5573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a0a9190610dc8565b5050505050565b610a1e6020840184610bc4565b6001600160a01b031663549e8426610a3c6040860160208701610bc4565b600080610a4f6060890160408a01610bc4565b610a5f60808a0160608b01610bc4565b89608001358a60a001358a8a6040518a63ffffffff1660e01b8152600401610a8f99989796959493929190610e8a565b6020604051808303816000875af1158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad29190610dc8565b50505050565b6001600160a01b03169052565b80356001600160a01b0381168114610afc57600080fd5b919050565b600080600080600080600080888a036102e0811215610b1f57600080fd5b60c0811215610b2d57600080fd5b89985060e060bf1982011215610b4257600080fd5b60c08a01975060a061019f1982011215610b5b57600080fd5b506101a089019550610b706102408a01610ae5565b9450610b7f6102608a01610ae5565b9350610b8e6102808a01610ae5565b9250610b9d6102a08a01610ae5565b91506102c08901358015158114610bb357600080fd5b809150509295985092959890939650565b600060208284031215610bd657600080fd5b610bdf82610ae5565b9392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000815180845260005b81811015610c5757602081850181015186830182015201610c3b565b506000602082860101526020601f19601f83011685010191505092915050565b60006101208083528b5160e082850152610c95610200850182610c31565b91505060208c015161011f198085840301610140860152610cb68383610c31565b925060408e015191508085840301610160860152610cd48383610c31565b925060608e015191508085840301610180860152610cf28383610c31565b925060808e0151915080858403016101a0860152610d108383610c31565b925060a08e0151915080858403016101c0860152610d2e8383610c31565b925060c08e0151915080858403016101e086015250610d4d8282610c31565b92505050610d5e602083018b610ad8565b610d6b604083018a610ad8565b610d786060830189610ad8565b610d856080830188610ad8565b610d9260a0830187610ad8565b610d9f60c0830186610ad8565b610dac60e0830185610ad8565b610dba610100830184610ad8565b9a9950505050505050505050565b600060208284031215610dda57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610e1157610e11610de1565b500290565b80820180821115610e2957610e29610de1565b92915050565b600061010060018060a01b03808c1684528a602085015289604085015280891660608501528088166080850152508560a08401528460c08401528060e0840152610e7b81840185610c31565b9b9a5050505050505050505050565b600061012060018060a01b03808d1684528b60208501528a6040850152808a1660608501528089166080850152508660a08401528560c08401528460e084015280610100840152610edd81840185610c31565b9c9b50505050505050505050505056fea264697066735822122056fcd29cd4a78b3b69467fb30c5bf7689bd7105360b3dba08b4b86809e09a8e664736f6c63430008100033";

type L1TokenBridgeRetryableSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L1TokenBridgeRetryableSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L1TokenBridgeRetryableSender__factory extends ContractFactory {
  constructor(...args: L1TokenBridgeRetryableSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "L1TokenBridgeRetryableSender";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<L1TokenBridgeRetryableSender> {
    return super.deploy(
      overrides || {}
    ) as Promise<L1TokenBridgeRetryableSender>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): L1TokenBridgeRetryableSender {
    return super.attach(address) as L1TokenBridgeRetryableSender;
  }
  connect(signer: Signer): L1TokenBridgeRetryableSender__factory {
    return super.connect(signer) as L1TokenBridgeRetryableSender__factory;
  }
  static readonly contractName: "L1TokenBridgeRetryableSender";
  public readonly contractName: "L1TokenBridgeRetryableSender";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L1TokenBridgeRetryableSenderInterface {
    return new utils.Interface(_abi) as L1TokenBridgeRetryableSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L1TokenBridgeRetryableSender {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as L1TokenBridgeRetryableSender;
  }
}
