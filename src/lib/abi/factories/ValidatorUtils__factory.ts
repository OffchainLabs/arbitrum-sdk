/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ValidatorUtils,
  ValidatorUtilsInterface,
} from "../ValidatorUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IRollupCore",
        name: "rollup",
        type: "address",
      },
    ],
    name: "areUnresolvedNodesLinear",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupUserAbs",
        name: "rollup",
        type: "address",
      },
    ],
    name: "checkDecidableNextNode",
    outputs: [
      {
        internalType: "enum ValidatorUtils.ConfirmType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupCore",
        name: "rollup",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "node1",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "node2",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "maxDepth",
        type: "uint256",
      },
    ],
    name: "findNodeConflict",
    outputs: [
      {
        components: [
          {
            internalType: "enum ValidatorUtils.NodeConflictType",
            name: "ty",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "node1",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "node2",
            type: "uint64",
          },
        ],
        internalType: "struct ValidatorUtils.NodeConflict",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupCore",
        name: "rollup",
        type: "address",
      },
      {
        internalType: "address",
        name: "staker1",
        type: "address",
      },
      {
        internalType: "address",
        name: "staker2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxDepth",
        type: "uint256",
      },
    ],
    name: "findStakerConflict",
    outputs: [
      {
        components: [
          {
            internalType: "enum ValidatorUtils.NodeConflictType",
            name: "ty",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "node1",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "node2",
            type: "uint64",
          },
        ],
        internalType: "struct ValidatorUtils.NodeConflict",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupCore",
        name: "rollup",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "startIndex",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "max",
        type: "uint64",
      },
    ],
    name: "getStakers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "hasMore",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupCore",
        name: "rollup",
        type: "address",
      },
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "latestStaked",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "stateHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "challengeHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "confirmData",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "prevNum",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "deadlineBlock",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "noChildConfirmedBeforeBlock",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "stakerCount",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childStakerCount",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "firstChildBlock",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "latestChildNumber",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "createdAtBlock",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "nodeHash",
            type: "bytes32",
          },
        ],
        internalType: "struct Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupCore",
        name: "rollup",
        type: "address",
      },
    ],
    name: "refundableStakers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupUserAbs",
        name: "rollup",
        type: "address",
      },
    ],
    name: "requireConfirmable",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupCore",
        name: "rollup",
        type: "address",
      },
    ],
    name: "requireRejectable",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupCore",
        name: "rollup",
        type: "address",
      },
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "stakedNodes",
    outputs: [
      {
        internalType: "uint64[]",
        name: "",
        type: "uint64[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRollupCore",
        name: "rollup",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "startIndex",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "max",
        type: "uint64",
      },
    ],
    name: "timedOutChallenges",
    outputs: [
      {
        internalType: "uint64[]",
        name: "",
        type: "uint64[]",
      },
      {
        internalType: "bool",
        name: "hasMore",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506125bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637464ae06116100715780637464ae06146101415780637988ad371461016157806382f50e2d14610181578063aea2f06e14610194578063c308eaaf146101b7578063f36e18cc146101d757600080fd5b806301d9717d146100ae5780630a46c1b5146100d85780631fc43bb6146100f85780633400b5fa1461010d578063712293401461012e575b600080fd5b6100c16100bc366004611efd565b6101f8565b6040516100cf929190611f36565b60405180910390f35b6100eb6100e6366004612043565b6103ec565b6040516100cf919061207d565b61010b610106366004612043565b6104b1565b005b61012061011b3660046120ac565b610973565b6040516100cf92919061213b565b61010b61013c366004612043565b610c83565b61015461014f366004612043565b610fe9565b6040516100cf9190612198565b61017461016f3660046121ab565b611340565b6040516100cf91906121fc565b61017461018f366004612240565b611477565b6101a76101a2366004612043565b611884565b60405190151581526020016100cf565b6101ca6101c5366004611efd565b611a6a565b6040516100cf9190612281565b6101ea6101e53660046120ac565b611c79565b6040516100cf929190612294565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101829052604051631f4b2bb760e11b81526000906001600160a01b03861690633e96576e906102879087906004016122a7565b60206040518083038186803b15801561029f57600080fd5b505afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d791906122c6565b90506001600160401b03811661035b57846001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032057600080fd5b505afa158015610334573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035891906122c6565b90505b6040516324b204d360e21b81526001600160401b03821660048201526000906001600160a01b038716906392c8134c906024016101806040518083038186803b1580156103a757600080fd5b505afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190612330565b9196919550909350505050565b604051630fe21ddb60e11b81526000903090631fc43bb6906104129085906004016122a7565b60006040518083038186803b15801561042a57600080fd5b505afa92505050801561043b575060015b6104445761044c565b506001919050565b6040516301c48a4d60e61b8152309063712293409061046f9085906004016122a7565b60006040518083038186803b15801561048757600080fd5b505afa925050508015610498575060015b6104a457506000919050565b506002919050565b919050565b806001600160a01b03166367425daf6040518163ffffffff1660e01b815260040160006040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506000816001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057591906122c6565b6001600160401b03169050600081116105c25760405162461bcd60e51b815260206004820152600a6024820152694e4f5f5354414b45525360b01b60448201526064015b60405180910390fd5b6000826001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063591906122c6565b6040516324b204d360e21b81526001600160401b03821660048201529091506000906001600160a01b038516906392c8134c906024016101806040518083038186803b15801561068457600080fd5b505afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc9190612330565b90506106c781611e68565b836001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561070057600080fd5b505afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073891906122c6565b6001600160401b031681606001516001600160401b03161461075c5761075c612402565b60608101516040516324b204d360e21b81526001600160401b0390911660048201526000906001600160a01b038616906392c8134c906024016101806040518083038186803b1580156107ae57600080fd5b505afa1580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190612330565b90506107f181611e98565b6040516317185fa560e21b81526001600160401b03841660048201526000906001600160a01b03871690635c617e949060240160206040518083038186803b15801561083c57600080fd5b505afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190612418565b6060840151604051633684685160e11b81526001600160401b0390911660048201526001600160a01b03881690636d08d0a29060240160206040518083038186803b1580156108c257600080fd5b505afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190612418565b6109049190612447565b9050808360c001516001600160401b031661091f919061245e565b8260e001516001600160401b03161461096b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d0531317d4d51052d15160921b60448201526064016105b9565b505050505050565b60606000806000610985878787611c79565b91509150600082516001600160401b038111156109a4576109a46122e3565b6040519080825280602002602001820160405280156109cd578160200160208202803683370190505b509050600080896001600160a01b031663023a96fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190612476565b905060005b8551811015610c73576000868281518110610a6657610a66612493565b6020026020010151905060008c6001600160a01b03166369fd251c836040518263ffffffff1660e01b8152600401610a9e91906122a7565b60206040518083038186803b158015610ab657600080fd5b505afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee91906122c6565b90506001600160401b03811615801590610b835750604051639ede42b960e01b81526001600160401b03821660048201526001600160a01b03851690639ede42b99060240160206040518083038186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8391906124a9565b8015610c1a57506040516323a9ef2360e01b81526001600160401b03821660048201526001600160a01b0380841691908616906323a9ef239060240160206040518083038186803b158015610bd757600080fd5b505afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190612476565b6001600160a01b0316145b15610c5e57808686610c2b816124cb565b975081518110610c3d57610c3d612493565b60200260200101906001600160401b031690816001600160401b0316815250505b50508080610c6b906124cb565b915050610a49565b5050815297909650945050505050565b806001600160a01b03166367425daf6040518163ffffffff1660e01b815260040160006040518083038186803b158015610cbc57600080fd5b505afa158015610cd0573d6000803e3d6000fd5b505050506000816001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0f57600080fd5b505afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4791906122c6565b6040516324b204d360e21b81526001600160401b03821660048201529091506000906001600160a01b038416906392c8134c906024016101806040518083038186803b158015610d9657600080fd5b505afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190612330565b9050826001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4191906122c6565b6001600160401b031681606001516001600160401b03161415610fe45780608001516001600160401b0316431015610e8b5760405162461bcd60e51b81526004016105b9906124e6565b60608101516040516324b204d360e21b81526001600160401b039091166004820152610f1b906001600160a01b038516906392c8134c906024016101806040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190612330565b611e98565b6040516317185fa560e21b81526001600160401b03831660048201526001600160a01b03841690635c617e949060240160206040518083038186803b158015610f6357600080fd5b505afa158015610f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9b9190612418565b8160c001516001600160401b031614610fe45760405162461bcd60e51b815260206004820152600b60248201526a4841535f5354414b45525360a81b60448201526064016105b9565b505050565b60606000826001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b15801561102657600080fd5b505afa15801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e91906122c6565b6001600160401b031690506000816001600160401b03811115611083576110836122e3565b6040519080825280602002602001820160405280156110ac578160200160208202803683370190505b5090506000846001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ea57600080fd5b505afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112291906122c6565b6001600160401b031690506000805b84816001600160401b0316101561133557604051631b774dd160e21b81526001600160401b03821660048201526000906001600160a01b03891690636ddd37449060240160206040518083038186803b15801561118d57600080fd5b505afa1580156111a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c59190612476565b90506000886001600160a01b0316633e96576e836040518263ffffffff1660e01b81526004016111f591906122a7565b60206040518083038186803b15801561120d57600080fd5b505afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124591906122c6565b6001600160401b031690508481111580156112e25750604051631a7f494760e21b81526001600160a01b038a16906369fd251c906112879085906004016122a7565b60206040518083038186803b15801561129f57600080fd5b505afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906122c6565b6001600160401b0316155b1561132057818685815181106112fa576112fa612493565b6001600160a01b03909216602092830291909101909101528361131c816124cb565b9450505b5050808061132d9061250f565b915050611131565b508252509392505050565b6040805160608101825260008082526020820181905291810191909152604051631f4b2bb760e11b81526000906001600160a01b03871690633e96576e9061138c9088906004016122a7565b60206040518083038186803b1580156113a457600080fd5b505afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc91906122c6565b90506000866001600160a01b0316633e96576e866040518263ffffffff1660e01b815260040161140c91906122a7565b60206040518083038186803b15801561142457600080fd5b505afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c91906122c6565b905061146a87838387611477565b925050505b949350505050565b60408051606081018252600080825260208201819052918101919091526000856001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114cf57600080fd5b505afa1580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150791906122c6565b6040516324b204d360e21b81526001600160401b03871660048201529091506000906001600160a01b038816906392c8134c906024016101806040518083038186803b15801561155657600080fd5b505afa15801561156a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158e9190612330565b606001516040516324b204d360e21b81526001600160401b03871660048201529091506000906001600160a01b038916906392c8134c906024016101806040518083038186803b1580156115e157600080fd5b505afa1580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190612330565b60600151905060005b8581101561185857866001600160401b0316886001600160401b0316141561167f5760408051606081019091528060005b8152602001896001600160401b03168152602001886001600160401b031681525094505050505061146f565b816001600160401b0316836001600160401b031614156116ac576040805160608101909152806001611653565b836001600160401b0316836001600160401b03161080156116de5750836001600160401b0316826001600160401b0316105b1561170e5760408051606081019091528060028152600060208201819052604090910152945061146f9350505050565b816001600160401b0316836001600160401b031610156117b9576040516324b204d360e21b81526001600160401b038316600482015291965086916001600160a01b038a16906392c8134c906024016101806040518083038186803b15801561177657600080fd5b505afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae9190612330565b606001519150611846565b6040516324b204d360e21b81526001600160401b038416600482015292975087926001600160a01b038a16906392c8134c906024016101806040518083038186803b15801561180757600080fd5b505afa15801561181b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183f9190612330565b6060015192505b80611850816124cb565b915050611622565b506040805160608101909152806003815260006020820181905260409091015298975050505050505050565b600080826001600160a01b0316637ba9534a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118c057600080fd5b505afa1580156118d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f891906122c6565b6001600160401b031690506000836001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197691906122c6565b90505b81816001600160401b031611611a60576000816001600160401b0316118015611a3f57506119a8600182612536565b6040516324b204d360e21b81526001600160401b03838116600483015291909116906001600160a01b038616906392c8134c906024016101806040518083038186803b1580156119f757600080fd5b505afa158015611a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2f9190612330565b606001516001600160401b031614155b15611a4e575060009392505050565b80611a588161250f565b915050611979565b5060019392505050565b60408051620186a08082526230d420820190925260609160009190602082016230d40080368337019050509050600080856001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ad357600080fd5b505afa158015611ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0b91906122c6565b90505b856001600160a01b0316637ba9534a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4757600080fd5b505afa158015611b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7f91906122c6565b6001600160401b0316816001600160401b031611611c6f5760405163154cb5e960e31b81526001600160401b03821660048201526001600160a01b03868116602483015287169063aa65af489060440160206040518083038186803b158015611be757600080fd5b505afa158015611bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1f91906124a9565b15611c5d5780838381518110611c3757611c37612493565b6001600160401b039092166020928302919091019091015281611c59816124cb565b9250505b80611c678161250f565b915050611b0e565b5081529392505050565b6060600080856001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb757600080fd5b505afa158015611ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cef91906122c6565b6001600160401b0316905080611d05858761255e565b6001600160401b031611611d2d57611d1d848661255e565b6001600160401b03169050600191505b6000816001600160401b03811115611d4757611d476122e3565b604051908082528060200260200182016040528015611d70578160200160208202803683370190505b50905060005b82816001600160401b03161015611e5c576001600160a01b038816636ddd3744611da0838a61255e565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b158015611ddf57600080fd5b505afa158015611df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e179190612476565b82826001600160401b031681518110611e3257611e32612493565b6001600160a01b039092166020928302919091019091015280611e548161250f565b915050611d76565b50925050935093915050565b80608001516001600160401b0316431015611e955760405162461bcd60e51b81526004016105b9906124e6565b50565b8060a001516001600160401b0316431015611e955760405162461bcd60e51b815260206004820152601060248201526f10d212531117d513d3d7d49150d1539560821b60448201526064016105b9565b6001600160a01b0381168114611e9557600080fd5b60008060408385031215611f1057600080fd5b8235611f1b81611ee8565b91506020830135611f2b81611ee8565b809150509250929050565b60006101a0820190506001600160401b03841682528251602083015260208301516040830152604083015160608301526060830151611f8060808401826001600160401b03169052565b5060808301516001600160401b03811660a08401525060a08301516001600160401b03811660c08401525060c08301516001600160401b03811660e08401525060e0830151610100611fdc818501836001600160401b03169052565b8401519050610120611ff8848201836001600160401b03169052565b8401519050610140612014848201836001600160401b03169052565b8401519050610160612030848201836001600160401b03169052565b8085015161018085015250509392505050565b60006020828403121561205557600080fd5b813561206081611ee8565b9392505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061209157612091612067565b91905290565b6001600160401b0381168114611e9557600080fd5b6000806000606084860312156120c157600080fd5b83356120cc81611ee8565b925060208401356120dc81612097565b915060408401356120ec81612097565b809150509250925092565b600081518084526020808501945080840160005b838110156121305781516001600160401b03168752958201959082019060010161210b565b509495945050505050565b60408152600061214e60408301856120f7565b905082151560208301529392505050565b600081518084526020808501945080840160005b838110156121305781516001600160a01b031687529582019590820190600101612173565b602081526000612060602083018461215f565b600080600080608085870312156121c157600080fd5b84356121cc81611ee8565b935060208501356121dc81611ee8565b925060408501356121ec81611ee8565b9396929550929360600135925050565b815160608201906004811061221357612213612067565b8083525060208301516001600160401b038082166020850152806040860151166040850152505092915050565b6000806000806080858703121561225657600080fd5b843561226181611ee8565b9350602085013561227181612097565b925060408501356121ec81612097565b60208152600061206060208301846120f7565b60408152600061214e604083018561215f565b6001600160a01b0391909116815260200190565b80516104ac81612097565b6000602082840312156122d857600080fd5b815161206081612097565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b038111828210171561232a57634e487b7160e01b600052604160045260246000fd5b60405290565b6000610180828403121561234357600080fd5b61234b6122f9565b82518152602083015160208201526040830151604082015261236f606084016122bb565b6060820152612380608084016122bb565b608082015261239160a084016122bb565b60a08201526123a260c084016122bb565b60c08201526123b360e084016122bb565b60e08201526101006123c68185016122bb565b908201526101206123d88482016122bb565b908201526101406123ea8482016122bb565b90820152610160928301519281019290925250919050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561242a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561245957612459612431565b500390565b6000821982111561247157612471612431565b500190565b60006020828403121561248857600080fd5b815161206081611ee8565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156124bb57600080fd5b8151801515811461206057600080fd5b60006000198214156124df576124df612431565b5060010190565b6020808252600f908201526e4245464f52455f444541444c494e4560881b604082015260600190565b60006001600160401b038083168181141561252c5761252c612431565b6001019392505050565b60006001600160401b038381169083168181101561255657612556612431565b039392505050565b60006001600160401b0380831681851680830382111561258057612580612431565b0194935050505056fea2646970667358221220cd9db62abd9c10e23c7fe2cb7527c8678a5cdf0b917179fd4c7580dcaf3512be64736f6c63430008090033";

type ValidatorUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ValidatorUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ValidatorUtils__factory extends ContractFactory {
  constructor(...args: ValidatorUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ValidatorUtils";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ValidatorUtils> {
    return super.deploy(overrides || {}) as Promise<ValidatorUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ValidatorUtils {
    return super.attach(address) as ValidatorUtils;
  }
  connect(signer: Signer): ValidatorUtils__factory {
    return super.connect(signer) as ValidatorUtils__factory;
  }
  static readonly contractName: "ValidatorUtils";
  public readonly contractName: "ValidatorUtils";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ValidatorUtilsInterface {
    return new utils.Interface(_abi) as ValidatorUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ValidatorUtils {
    return new Contract(address, _abi, signerOrProvider) as ValidatorUtils;
  }
}
