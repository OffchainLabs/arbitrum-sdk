/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { InboxMock, InboxMockInterface } from "../InboxMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxGas",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "InboxRetryableTicket",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "excessFeeRefundAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "callValueRefundAddress",
        type: "address",
      },
    ],
    name: "RefundAddresses",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "maxSubmissionCost",
        type: "uint256",
      },
    ],
    name: "TicketData",
    type: "event",
  },
  {
    inputs: [],
    name: "activeOutbox",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "contract IBridge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "l2CallValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSubmissionCost",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "excessFeeRefundAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "callValueRefundAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxFeePerGas",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "createRetryableTicket",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1Sender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1SenderMock",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "seqNum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "setL2ToL1Sender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600080546001600160a01b031916815560015534801561002357600080fd5b50610489806100336000396000f3fe6080604052600436106100605760003560e01c806311b383ac146100655780632ab0188d146100a4578063679b6ded146100e157806380648b0214610102578063ab5d894314610120578063c3de58c514610133578063e78cea9214610120575b600080fd5b34801561007157600080fd5b506100a26100803660046102a3565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b005b3480156100b057600080fd5b506000546100c4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f46100ef3660046102c5565b610149565b6040519081526020016100d8565b34801561010e57600080fd5b506000546001600160a01b03166100c4565b34801561012c57600080fd5b50306100c4565b34801561013f57600080fd5b506100f460015481565b600061015584866103a6565b61015f8a8a6103c5565b61016991906103c5565b3410156101ae5760405162461bcd60e51b815260206004820152600f60248201526e57524f4e475f4554485f56414c554560881b604482015260640160405180910390fd5b6040518881527f7efacbad201ebbc50ec0ce4b474c54b735a31b1bac996acff50df7de0314e8f99060200160405180910390a1604080516001600160a01b03808a168252881660208201527f70b37e3cd4440bad0fef84e97b8196e82fe9a1ba044f099cbac6cd7f79e8702f910160405180910390a17f39eaf7b19fb00e9d96656e8541bbe0ded1a017e1fae845e655c236bc27ea5e71338b8b88878760405161025d969594939291906103de565b60405180910390a1600180549060006102758361043a565b909155509a9950505050505050505050565b80356001600160a01b038116811461029e57600080fd5b919050565b6000602082840312156102b557600080fd5b6102be82610287565b9392505050565b60008060008060008060008060006101008a8c0312156102e457600080fd5b6102ed8a610287565b985060208a0135975060408a0135965061030960608b01610287565b955061031760808b01610287565b945060a08a0135935060c08a0135925060e08a013567ffffffffffffffff8082111561034257600080fd5b818c0191508c601f83011261035657600080fd5b81358181111561036557600080fd5b8d602082850101111561037757600080fd5b6020830194508093505050509295985092959850929598565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156103c0576103c0610390565b500290565b808201808211156103d8576103d8610390565b92915050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b60006001820161044c5761044c610390565b506001019056fea2646970667358221220a97edd6aa259748f634e56cab21d31b91cbc840dd01f1fa229fc9a37a87cea4b64736f6c63430008100033";

type InboxMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InboxMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InboxMock__factory extends ContractFactory {
  constructor(...args: InboxMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "InboxMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<InboxMock> {
    return super.deploy(overrides || {}) as Promise<InboxMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): InboxMock {
    return super.attach(address) as InboxMock;
  }
  connect(signer: Signer): InboxMock__factory {
    return super.connect(signer) as InboxMock__factory;
  }
  static readonly contractName: "InboxMock";
  public readonly contractName: "InboxMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InboxMockInterface {
    return new utils.Interface(_abi) as InboxMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InboxMock {
    return new Contract(address, _abi, signerOrProvider) as InboxMock;
  }
}
