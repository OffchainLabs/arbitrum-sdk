'use strict'

import { getL2Network } from '../../src/lib/dataEntities/networks'
import { providers } from 'ethers'
import { mock, when, anything, instance, deepEqual } from 'ts-mockito'
import { expect } from 'chai'

import { MultiCaller } from '../../src'

describe('Multicall', () => {
  const createProviderMock = async (networkChoiceOverride?: number) => {
    const l2Network = await getL2Network(networkChoiceOverride || 42161)

    const l2ProviderMock = mock(providers.JsonRpcProvider)
    const latestBlock = l2Network.nitroGenesisBlock + 1000
    when(l2ProviderMock.getBlockNumber()).thenResolve(latestBlock)
    when(l2ProviderMock.getNetwork()).thenResolve({
      chainId: l2Network.chainID,
    } as any)
    when(l2ProviderMock._isProvider).thenReturn(true)
    when(l2ProviderMock.getLogs(anything())).thenResolve([])

    /* 
    This test data is taken from an actual example of a mainnet multicall. To produce this data we do the following:
    1. Pass mainnet args to the multicall class, instantiated with a mock provider
    2. Capture the .call request that was made on the provider
    3. In another script, execute the captured .call against mainnet and record the response
    4. Mock the provider with the captured request, and the response as below
    */
    // Maker
    when(
      l2ProviderMock.call(
        deepEqual({
          data: '0xbce38bd7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000406fdde03000000000000000000000000000000000000000000000000000000000000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000495d89b4100000000000000000000000000000000000000000000000000000000',
          // L2 multicall address
          to: '0x108B25170319f38DbED14cA9716C54E5D1FF4623',
        }),
        undefined
      )
    ).thenResolve(
      '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000204d616b65720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000204d4b520000000000000000000000000000000000000000000000000000000000'
    )
    // Uniswap
    when(
      l2ProviderMock.call(
        deepEqual({
          data: '0xbce38bd7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f9840000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000406fdde03000000000000000000000000000000000000000000000000000000000000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f9840000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000495d89b4100000000000000000000000000000000000000000000000000000000',
          to: '0x108B25170319f38DbED14cA9716C54E5D1FF4623',
        }),
        undefined
      )
    ).thenResolve(
      '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000007556e69737761700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003554e490000000000000000000000000000000000000000000000000000000000'
    )
    const l2Provider = instance(l2ProviderMock)

    return {
      l2ProviderMock,
      l2Provider,
      l2Network,
      latestBlock,
    }
  }

  it('returns parsed data from bytes32', async function () {
    const { l2Provider } = await createProviderMock(421613)
    const multicaller = await MultiCaller.fromProvider(l2Provider)
    const [data] = await multicaller.getTokenData(
      // Maker mainnet address
      ['0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2'],
      { symbol: true, name: true }
    )

    expect(data.name, 'Failed to get token name from bytes32').to.be.equal(
      'Maker'
    )
    expect(data.symbol, 'Failed to get token symbol from bytes32').to.be.equal(
      'MKR'
    )
  })

  it('returns parsed data from byte string', async function () {
    const { l2Provider } = await createProviderMock(421613)
    const multicaller = await MultiCaller.fromProvider(l2Provider)
    const [data] = await multicaller.getTokenData(
      // Uniswap mainnet address
      ['0x1f9840a85d5af5bf1d1762f925bdaddc4201f984'],
      { symbol: true, name: true }
    )

    expect(data.name, 'Failed to get token name from byte string').to.be.equal(
      'Uniswap'
    )
    expect(
      data.symbol,
      'Failed to get token symbol from byte string'
    ).to.be.equal('UNI')
  })
})
