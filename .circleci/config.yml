aliases:
  - &restore_yarn_cache
    keys:
      - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - yarn-packages-v1-{{ .Branch }}-
      - yarn-packages-v1-
  - &save_yarn_cache
    paths:
      - ~/.cache/yarn
    key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
  - &restore_ethbridge_cache
    keys:
      - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - yarn-packages-v1-{{ .Branch }}-
      - yarn-packages-v1-
  - &save_ethbridge_cache
    paths:
      - ~/.cache/yarn
    key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

  - &restore_go_cache
    keys:
      - go-mod-v11-{{ .Branch }}-{{ checksum "packages/arb-rpc-node/go.sum" }}
      - go-mod-v11-{{ .Branch }}-
      - go-mod-v11-
  - &save_go_cache
    key: go-mod-v11-{{ .Branch }}-{{ checksum "packages/arb-rpc-node/go.sum" }}
    paths:
      - ~/go/pkg/mod
  - &test-path /tmp/test-results
  - &ethbridge-test-path /tmp/test-results/ethbridge.xml
version: 2
workflows:
  version: 2
  build:
    jobs:
      - sdk
      - sdk-audit
jobs:
  sdk:
    docker:
      - image: offchainlabs/frontend-base:0.6.1
    environment:
      TEST_RESULTS: *test-path
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - restore_cache: *restore_yarn_cache
      - run: yarn install --cache-folder ~/.cache/yarn
      - save_cache: *save_yarn_cache
      - run:
          name: lint sdk
          command: |
            yarn
            yarn build --reporter-options output=${TEST_RESULTS}/sdk.xml
            yarn lint --format junit -o ${TEST_RESULTS}/sdk-lint.xml
          working_directory: /home/user/project/
      - run:
          name: Upload Coverage to Codecov
          command: codecovbash
          working_directory: /home/user/project/packages

      - store_test_results:
          path: *test-path
  sdk-audit:
    docker:
      - image: offchainlabs/frontend-base:0.6.1
    steps:
      - checkout
      - restore_cache: *restore_yarn_cache
      - run:
          name: install and audit
          command: |
            yarn install --cache-folder ~/.cache/yarn
            if [[ ! -z $CIRCLE_PULL_REQUEST ]] ; then yarn audit:ci ; fi
          working_directory: /home/user/project
