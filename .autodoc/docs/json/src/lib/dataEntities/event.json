{
  "fileName": "event.ts",
  "filePath": "src/lib/dataEntities/event.ts",
  "url": "https://github.com/offchainlabs/arbitrum-sdk/src/lib/dataEntities/event.ts",
  "summary": "This file contains utility functions for parsing logs emitted by Ethereum smart contracts. The functions are designed to work with contracts generated by Typechain, a tool for generating TypeScript bindings for Ethereum smart contracts. \n\nThe `parseTypedLog` function takes three arguments: a Typechain contract factory, a log object, and a filter name. It returns the parsed event data if the log matches the filter, or null otherwise. The `parseTypedLogs` function is similar, but takes an array of logs and returns an array of parsed events.\n\nThe `TypeChainContractFactory` type is an interface that extends the `Contract` interface from the `ethers` library. It adds two methods: `connect`, which creates a new contract instance connected to a specific address and provider, and `createInterface`, which returns an `Interface` object for the contract.\n\nThe `EventArgs` and `EventFromFilter` types are utility types for extracting the argument and event types from a `TypedEvent` or `TypedEventFilter` type, respectively. The `FilterName` type is a union of all the filter keys for a given contract. The `EventType` type is a utility type for extracting the event type for a given filter name.\n\nOverall, these functions provide a convenient way to parse logs emitted by Ethereum smart contracts, using TypeScript types generated by Typechain. This can be useful for building applications that interact with smart contracts, as it allows developers to work with strongly-typed data and avoid errors caused by incorrect parsing. \n\nExample usage:\n\n```\nimport { parseTypedLogs, TypeChainContractFactory } from 'arbitrum-sdk'\nimport { MyContract } from './MyContract' // Generated by Typechain\n\nconst contractFactory: TypeChainContractFactory<MyContract> = MyContract\n\nconst logs = await provider.getLogs({ fromBlock: 0, toBlock: 'latest' })\n\nconst events = parseTypedLogs(contractFactory, logs, 'MyEvent')\n\nevents.forEach(event => {\n  console.log(event.myArg)\n})\n```",
  "questions": "1. What is the purpose of the `parseTypedLog` function?\n- The `parseTypedLog` function is used to parse a log that matches a given filter name and returns the event arguments if the filter name topic matches the log topic.\n\n2. What is the purpose of the `parseTypedLogs` function?\n- The `parseTypedLogs` function is used to parse an array of logs and filter out any logs whose topic does not match the provided filter name topic.\n\n3. What is the purpose of the `TypeChainContractFactory` type?\n- The `TypeChainContractFactory` type is used to define additional properties for Typechain contract factories, including the ability to connect to a provider and create an interface."
}