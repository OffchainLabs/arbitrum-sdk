{
  "folderName": "inbox",
  "folderPath": ".autodoc/docs/json/src/lib/inbox",
  "url": "https://github.com/offchainlabs/arbitrum-sdk/.autodoc/docs/json/src/lib/inbox",
  "files": [
    {
      "fileName": "inbox.ts",
      "filePath": "src/lib/inbox/inbox.ts",
      "url": "https://github.com/offchainlabs/arbitrum-sdk/src/lib/inbox/inbox.ts",
      "summary": "The `InboxTools` class in this code provides a set of tools for interacting with the inbox and bridge contracts in the Arbitrum SDK. It is designed to help developers send L2 signed transactions, force include eligible messages in the delayed inbox, and sign L2 transactions.\n\nThe constructor of the `InboxTools` class takes an L1 signer and an L2 network as arguments. It initializes the L1 provider and L1 network based on the provided L2 network's partner chain ID.\n\nThe `findFirstBlockBelow` method finds the first block whose number is below the provided number and whose timestamp is below the provided timestamp. This is useful for searching for eligible events within a range of blocks.\n\nThe `estimateArbitrumGas` method estimates the gas required for an L2 transaction by calling the `gasEstimateComponents` function of the NodeInterface contract. It returns an object containing the gas estimate for L1 and L2 parts of the transaction.\n\nThe `getForceIncludableBlockRange` method calculates a range of blocks within which messages eligible for force inclusion are emitted. It takes the block number range size as an argument.\n\nThe `getEventsAndIncreaseRange` method searches for force includable events in a range of blocks. If no events are found, the search range is increased incrementally up to the max search range blocks.\n\nThe `getForceIncludableEvent` method finds the event of the latest message that can be force included. It takes optional arguments for max search range blocks, start search range blocks, and range multiplier.\n\nThe `forceInclude` method force includes all eligible messages in the delayed inbox. It takes an optional message delivered event and overrides as arguments.\n\nThe `sendL2SignedTx` method sends an L2 signed transaction using the delayed inbox. It takes a signed transaction as an argument and returns the L1 delayed inbox's transaction.\n\nThe `signL2Tx` method signs an L2 transaction with the provided transaction request and L2 signer. It estimates the gas required for the transaction and returns the signed transaction data.\n\nThese methods can be used in combination to interact with the Arbitrum SDK's inbox and bridge contracts, enabling developers to send L2 transactions and manage message inclusions.",
      "questions": "1. **Question**: What is the purpose of the `InboxTools` class in this code?\n   **Answer**: The `InboxTools` class provides tools for interacting with the inbox and bridge contracts in the Arbitrum SDK. It includes methods for force including eligible messages in the delayed inbox, sending L2 signed transactions using the delayed inbox, and signing L2 transactions.\n\n2. **Question**: How does the `estimateArbitrumGas` method work?\n   **Answer**: The `estimateArbitrumGas` method estimates the gas required for an L2 transaction by calling the `gasEstimateComponents` function of the `NodeInterface` contract. It takes a `transactionl2Request` as input and returns an object containing the gas estimate components, including the gas estimate for L2.\n\n3. **Question**: What is the purpose of the `getForceIncludableEvent` method and how does it work?\n   **Answer**: The `getForceIncludableEvent` method finds the event of the latest message that can be force included in the delayed inbox. It searches for eligible events within a specified range of blocks, and if no events are found, it increases the search range incrementally up to the maximum search range. If an eligible event is found, it returns the event information; otherwise, it returns null."
    }
  ],
  "folders": [],
  "summary": "The `inbox.ts` file in the `arbitrum-sdk` project provides the `InboxTools` class, which offers a set of tools for interacting with the inbox and bridge contracts in the Arbitrum SDK. These tools are designed to help developers send L2 signed transactions, force include eligible messages in the delayed inbox, and sign L2 transactions.\n\nThe `InboxTools` class constructor takes an L1 signer and an L2 network as arguments. It initializes the L1 provider and L1 network based on the provided L2 network's partner chain ID. This allows developers to easily set up the necessary connections for interacting with the inbox and bridge contracts.\n\nOne of the key methods in this class is `sendL2SignedTx`, which sends an L2 signed transaction using the delayed inbox. This method takes a signed transaction as an argument and returns the L1 delayed inbox's transaction. This is useful for developers who want to send L2 transactions through the Arbitrum SDK.\n\n```javascript\nconst inboxTools = new InboxTools(l1Signer, l2Network);\nconst signedTx = await inboxTools.signL2Tx(txRequest, l2Signer);\nconst l1Tx = await inboxTools.sendL2SignedTx(signedTx);\n```\n\nAnother important method is `forceInclude`, which force includes all eligible messages in the delayed inbox. This method takes an optional message delivered event and overrides as arguments. This can be useful for developers who want to ensure that certain messages are included in the inbox.\n\n```javascript\nconst forceIncludableEvent = await inboxTools.getForceIncludableEvent();\nawait inboxTools.forceInclude(forceIncludableEvent);\n```\n\nThe `getForceIncludableEvent` method finds the event of the latest message that can be force included. It takes optional arguments for max search range blocks, start search range blocks, and range multiplier. This method can be used in combination with the `forceInclude` method to find and force include eligible messages.\n\nThe `estimateArbitrumGas` method estimates the gas required for an L2 transaction by calling the `gasEstimateComponents` function of the NodeInterface contract. This can be useful for developers who want to estimate the gas costs of their L2 transactions.\n\n```javascript\nconst gasEstimate = await inboxTools.estimateArbitrumGas(txRequest);\n```\n\nIn summary, the `inbox.ts` file provides a set of tools for interacting with the inbox and bridge contracts in the Arbitrum SDK, enabling developers to send L2 transactions and manage message inclusions. The `InboxTools` class and its methods can be used in combination to perform various tasks related to L2 transactions and message inclusions in the Arbitrum SDK.",
  "questions": ""
}