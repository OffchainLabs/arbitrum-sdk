{
  "fileName": "types.ts",
  "filePath": "src/lib/utils/types.ts",
  "url": "https://github.com/offchainlabs/arbitrum-sdk/src/lib/utils/types.ts",
  "summary": "This file contains three type definitions: OmitTyped, PartialPick, and RequiredPick. These types are used to manipulate object types in TypeScript.\n\nOmitTyped is used to create a new type that omits a specified set of properties from an existing type. The second generic parameter, K, specifies which properties to omit. However, unlike the built-in Omit type, OmitTyped does not enforce that K is a keyof T. This means that it is possible to omit properties that do not exist on the original type. OmitTyped is useful when you want to remove a set of properties from an object type, but you don't want to be restricted to only omitting properties that actually exist on the type.\n\nHere is an example of how OmitTyped can be used:\n\n```\ninterface Person {\n  name: string;\n  age: number;\n  email: string;\n}\n\ntype PersonWithoutEmail = OmitTyped<Person, 'email'>;\n\n// PersonWithoutEmail is equivalent to:\n// interface PersonWithoutEmail {\n//   name: string;\n//   age: number;\n// }\n```\n\nPartialPick is used to create a new type that makes a specified set of properties optional. The second generic parameter, K, specifies which properties to make optional. PartialPick uses OmitTyped to remove the specified properties from the original type, and then uses the built-in Partial type to make the remaining properties optional.\n\nHere is an example of how PartialPick can be used:\n\n```\ninterface Person {\n  name: string;\n  age: number;\n  email: string;\n}\n\ntype PersonWithOptionalEmail = PartialPick<Person, 'email'>;\n\n// PersonWithOptionalEmail is equivalent to:\n// interface PersonWithOptionalEmail {\n//   name: string;\n//   age: number;\n//   email?: string;\n// }\n```\n\nRequiredPick is used to create a new type that makes a specified set of properties required. The second generic parameter, K, specifies which properties to make required. RequiredPick uses the built-in Pick type to select the specified properties from the original type, and then uses the built-in Required type to make those properties required.\n\nHere is an example of how RequiredPick can be used:\n\n```\ninterface Person {\n  name: string;\n  age?: number;\n  email?: string;\n}\n\ntype PersonWithRequiredName = RequiredPick<Person, 'name'>;\n\n// PersonWithRequiredName is equivalent to:\n// interface PersonWithRequiredName {\n//   name: string;\n//   age?: number;\n//   email?: string;\n// }\n// However, the 'name' property is now required.\n```",
  "questions": "1. What is the purpose of the `OmitTyped` type and how does it differ from the `Omit` type?\n- The purpose of `OmitTyped` is to guard against refactoring of underlying type property names, while `Omit` does not enforce that the second generic is a keyof the first.\n\n2. What does the `PartialPick` type do?\n- `PartialPick` makes the specified properties optional by using `OmitTyped` to remove the specified properties from `T` and then adding them back as optional properties using `Partial`.\n\n3. What does the `RequiredPick` type do?\n- `RequiredPick` makes the specified properties required by using `Pick` to select the specified properties from `T` and then making them required using `Required`, before merging them back with the original type `T`."
}