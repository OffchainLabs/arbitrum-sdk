{
  "folderName": "assetBridger",
  "folderPath": ".autodoc/docs/json/src/lib/assetBridger",
  "url": "https://github.com/offchainlabs/arbitrum-sdk/.autodoc/docs/json/src/lib/assetBridger",
  "files": [
    {
      "fileName": "assetBridger.ts",
      "filePath": "src/lib/assetBridger/assetBridger.ts",
      "url": "https://github.com/offchainlabs/arbitrum-sdk/src/lib/assetBridger/assetBridger.ts",
      "summary": "This file contains TypeScript code for a base class called `AssetBridger` that is used for bridging assets between two networks: L1 and L2. The purpose of this class is to provide a common interface for depositing and withdrawing assets between these two networks. \n\nThe `AssetBridger` class is an abstract class, which means that it cannot be instantiated directly. Instead, it is meant to be extended by other classes that implement the `deposit` and `withdraw` methods. These methods are used to transfer assets between the two networks. \n\nThe `AssetBridger` class takes two type parameters: `DepositParams` and `WithdrawParams`. These parameters are used to specify the parameters required for depositing and withdrawing assets, respectively. \n\nThe `AssetBridger` class also has two methods: `checkL1Network` and `checkL2Network`. These methods are used to check that the signer or provider matches the L1 or L2 network, respectively. If the signer or provider does not match the network, an error is thrown. \n\nThe `AssetBridger` class is used in the larger project to provide a common interface for depositing and withdrawing assets between L1 and L2 networks. By using this class, developers can write code that is network-agnostic and can work with any L1 or L2 network that implements the `AssetBridger` interface. \n\nHere is an example of how the `AssetBridger` class might be used:\n\n```typescript\nimport { AssetBridger } from 'arbitrum-sdk'\n\nclass MyAssetBridger extends AssetBridger<MyDepositParams, MyWithdrawParams> {\n  public async deposit(params: MyDepositParams): Promise<L1ContractTransaction> {\n    // implementation of deposit method\n  }\n\n  public async withdraw(params: MyWithdrawParams): Promise<L2ContractTransaction> {\n    // implementation of withdraw method\n  }\n}\n\nconst myAssetBridger = new MyAssetBridger(l2Network)\nawait myAssetBridger.deposit(myDepositParams)\nawait myAssetBridger.withdraw(myWithdrawParams)\n```\n\nIn this example, `MyAssetBridger` extends the `AssetBridger` class and implements the `deposit` and `withdraw` methods. An instance of `MyAssetBridger` is then created with an L2 network, and the `deposit` and `withdraw` methods are called with the appropriate parameters.",
      "questions": "1. What is the purpose of this code file?\n- This code file defines an abstract class `AssetBridger` that serves as a base for bridging assets from L1 to L2 and back.\n\n2. What are the dependencies of this code file?\n- This code file imports several modules from the `../dataEntities` and `../message` directories, as well as `../dataEntities/networks` and `../dataEntities/signerOrProvider`. It also uses the `ArbSdkError` class from `../dataEntities/errors`.\n\n3. What methods are available in the `AssetBridger` class?\n- The `AssetBridger` class has two abstract methods: `deposit` and `withdraw`. It also has two non-abstract methods: `checkL1Network` and `checkL2Network`, which check that a given signer/provider matches the L1 or L2 network, respectively."
    },
    {
      "fileName": "erc20Bridger.ts",
      "filePath": "src/lib/assetBridger/erc20Bridger.ts",
      "url": "https://github.com/offchainlabs/arbitrum-sdk/src/lib/assetBridger/erc20Bridger.ts",
      "summary": "The `Erc20Bridger` class in this code is responsible for bridging ERC20 tokens between L1 (Ethereum) and L2 (Arbitrum) networks. It provides methods for approving tokens, depositing tokens from L1 to L2, and withdrawing tokens from L2 to L1. Additionally, it includes methods for fetching L1 and L2 gateway addresses, token addresses, and withdrawal events.\n\nFor example, to approve tokens for deposit, the `approveToken` method is used. It takes an object with the L1 address of the ERC20 token contract, the amount to approve, and transaction overrides. It returns a transaction object that can be sent to the Ethereum network.\n\nThe `deposit` method is used to deposit tokens from L1 to L2. It takes an object with the L1 address of the token ERC20 contract, the amount to deposit, and other optional parameters like the destination address, excess fee refund address, and call value refund address. It returns a transaction object that can be sent to the Ethereum network.\n\nThe `withdraw` method is used to withdraw tokens from L2 to L1. It takes an object with the L1 address of the token ERC20 contract, the amount to withdraw, and the destination address. It returns a transaction object that can be sent to the Arbitrum network.\n\nThe `AdminErc20Bridger` class extends the `Erc20Bridger` class and provides additional admin functionality for the token bridge, such as registering custom tokens and setting gateways.\n\nOverall, this code is an essential part of the Arbitrum SDK, enabling developers to interact with the Arbitrum token bridge and manage ERC20 token transfers between Ethereum and Arbitrum networks.",
      "questions": "1. **Question**: What is the purpose of the `Erc20Bridger` class and its methods?\n   **Answer**: The `Erc20Bridger` class is responsible for handling the movement of ERC20 tokens between L1 and L2 networks. It provides methods for approving tokens, depositing tokens from L1 to L2, and withdrawing tokens from L2 to L1.\n\n2. **Question**: How does the `AdminErc20Bridger` class extend the functionality of the `Erc20Bridger` class?\n   **Answer**: The `AdminErc20Bridger` class extends the functionality of the `Erc20Bridger` class by providing additional administrative functions for managing the token bridge, such as registering custom tokens, setting gateways, and fetching gateway set events.\n\n3. **Question**: What is the purpose of the `getL1ERC20Address` method and how does it ensure the validity of the returned address?\n   **Answer**: The `getL1ERC20Address` method retrieves the corresponding L1 token address for a given L2 token address. It ensures the validity of the returned address by checking if the L1 address is registered to the provided L2 address in the L2 gateway router."
    },
    {
      "fileName": "ethBridger.ts",
      "filePath": "src/lib/assetBridger/ethBridger.ts",
      "url": "https://github.com/offchainlabs/arbitrum-sdk/src/lib/assetBridger/ethBridger.ts",
      "summary": "The `EthBridger` class is a part of the `arbitrum-sdk` project and is used to move Ether between Layer 1 (L1) and Layer 2 (L2) of the Arbitrum network. It provides methods to deposit and withdraw Ether from L1 and L2, as well as deposit Ether from L1 to a different L2 address. \n\nThe class imports several dependencies from the `ethers` library, including `Signer` and `Provider` from `@ethersproject/abstract-signer` and `@ethersproject/abstract-provider`, respectively. It also imports `PayableOverrides` and `Overrides` from `@ethersproject/contracts` and `BigNumber` from `ethers`. \n\nThe class also imports several other dependencies from the `arbitrum-sdk` project, including `Inbox__factory` and `ArbSys__factory` from `../abi/factories`, `ARB_SYS_ADDRESS` from `../dataEntities/constants`, `AssetBridger` from `./assetBridger`, and several transaction-related classes from `../message` and `../dataEntities`. \n\nThe `EthBridger` class provides several methods for depositing and withdrawing Ether from L1 and L2. The `deposit` method deposits Ether from L1 to L2, while the `withdraw` method withdraws Ether from L2 to L1. The `depositTo` method deposits Ether from L1 to a different L2 address. \n\nThe `getDepositRequest` method returns a transaction request object for an Ether deposit to L2. The `getDepositToRequest` method returns a transaction request object for an Ether deposit to a different L2 address. The `getWithdrawalRequest` method returns a transaction request object for an Ether withdrawal from L2 to L1. \n\nThe `EthBridger` class also provides several types and interfaces, including `EthWithdrawParams`, `EthDepositParams`, `EthDepositToParams`, `L1ToL2TxReqAndSigner`, `L2ToL1TxReqAndSigner`, `EthDepositRequestParams`, `EthDepositToRequestParams`, and `GasOverrides`. \n\nOverall, the `EthBridger` class is a useful tool for moving Ether between L1 and L2 of the Arbitrum network. It provides a simple and straightforward interface for depositing and withdrawing Ether, as well as depositing Ether to a different L2 address.",
      "questions": "1. What is the purpose of this code?\n- This code defines a class called `EthBridger` that facilitates the transfer of ETH between L1 and L2 networks.\n\n2. What dependencies does this code have?\n- This code imports several modules from the `@ethersproject` package, as well as several custom modules from the `../abi/factories`, `../dataEntities`, `../message`, and `../utils` directories.\n\n3. What are some of the methods available in the `EthBridger` class?\n- The `EthBridger` class has several methods, including `fromProvider`, `getDepositRequest`, `deposit`, `getDepositToRequest`, `depositTo`, `getWithdrawalRequest`, and `withdraw`, which are used to facilitate the transfer of ETH between L1 and L2 networks."
    }
  ],
  "folders": [],
  "summary": "The `assetBridger` folder in the `arbitrum-sdk` project contains classes that facilitate the transfer of assets between Layer 1 (L1) and Layer 2 (L2) networks. These classes provide a common interface for depositing and withdrawing assets, making it easier for developers to work with different L1 and L2 networks.\n\nThe `AssetBridger` class is an abstract base class that defines the common interface for depositing and withdrawing assets. It takes two type parameters, `DepositParams` and `WithdrawParams`, which specify the required parameters for depositing and withdrawing assets, respectively. The class also includes methods for checking that the signer or provider matches the L1 or L2 network. Here's an example of how to extend the `AssetBridger` class:\n\n```typescript\nimport { AssetBridger } from 'arbitrum-sdk'\n\nclass MyAssetBridger extends AssetBridger<MyDepositParams, MyWithdrawParams> {\n  public async deposit(params: MyDepositParams): Promise<L1ContractTransaction> {\n    // implementation of deposit method\n  }\n\n  public async withdraw(params: MyWithdrawParams): Promise<L2ContractTransaction> {\n    // implementation of withdraw method\n  }\n}\n\nconst myAssetBridger = new MyAssetBridger(l2Network)\nawait myAssetBridger.deposit(myDepositParams)\nawait myAssetBridger.withdraw(myWithdrawParams)\n```\n\nThe `Erc20Bridger` class is responsible for bridging ERC20 tokens between L1 (Ethereum) and L2 (Arbitrum) networks. It provides methods for approving tokens, depositing tokens from L1 to L2, and withdrawing tokens from L2 to L1. Additionally, it includes methods for fetching L1 and L2 gateway addresses, token addresses, and withdrawal events. The `AdminErc20Bridger` class extends the `Erc20Bridger` class and provides additional admin functionality for the token bridge, such as registering custom tokens and setting gateways.\n\nThe `EthBridger` class is used to move Ether between L1 and L2 of the Arbitrum network. It provides methods to deposit and withdraw Ether from L1 and L2, as well as deposit Ether from L1 to a different L2 address. The class also includes several types and interfaces for working with Ether transactions.\n\nIn summary, the `assetBridger` folder contains essential classes for the `arbitrum-sdk` project, enabling developers to interact with the Arbitrum network and manage asset transfers between Ethereum and Arbitrum networks. By using these classes, developers can write code that is network-agnostic and can work with any L1 or L2 network that implements the `AssetBridger` interface.",
  "questions": ""
}