{
  "fileName": "L1Transaction.ts",
  "filePath": "src/lib/message/L1Transaction.ts",
  "url": "https://github.com/offchainlabs/arbitrum-sdk/src/lib/message/L1Transaction.ts",
  "summary": "This code is part of the `arbitrum-sdk` project and provides functionality for handling Layer 1 (L1) transactions and their corresponding Layer 2 (L2) messages. It includes classes for different types of transaction receipts, such as `L1TransactionReceipt`, `L1EthDepositTransactionReceipt`, and `L1ContractCallTransactionReceipt`. These classes provide methods for extracting information about the transaction, such as events, messages, and deposits.\n\nThe `L1TransactionReceipt` class provides methods for checking if a transaction is classic, getting MessageDelivered events, InboxMessageDelivered events, EthDeposit messages, and L1ToL2 messages. It also provides static methods for monkey-patching the `wait` function of a `ContractTransaction` to return a custom receipt type.\n\nThe `L1EthDepositTransactionReceipt` class extends `L1TransactionReceipt` and provides a `waitForL2` method, which waits for the funds to arrive on L2. It returns an object containing the completion status, message, and L2 transaction receipt.\n\nThe `L1ContractCallTransactionReceipt` class also extends `L1TransactionReceipt` and provides a `waitForL2` method, which waits for the transaction to arrive and be executed on L2. It returns an object containing the completion status, message, and L2 transaction receipt.\n\nThese classes can be used in the larger project to handle L1 transactions and their corresponding L2 messages, making it easier to interact with the Arbitrum network.\n\nFor example, to wait for an L1 Eth deposit transaction to be executed on L2, you can use the following code:\n\n```javascript\nconst l1EthDepositTransaction = ... // Obtain the L1 Eth deposit transaction\nconst l1EthDepositReceipt = L1TransactionReceipt.monkeyPatchEthDepositWait(l1EthDepositTransaction)\nconst l2Provider = ... // Obtain the L2 provider\nconst result = await l1EthDepositReceipt.waitForL2(l2Provider)\n```\n\nThis will return an object containing the completion status, message, and L2 transaction receipt for the Eth deposit transaction.",
  "questions": "1. **Question:** What is the purpose of the `L1TransactionReceipt` class and its derived classes `L1EthDepositTransactionReceipt` and `L1ContractCallTransactionReceipt`?\n\n   **Answer:** The `L1TransactionReceipt` class is an extended version of the `TransactionReceipt` class, providing additional functionality for handling L1 transactions. The derived classes `L1EthDepositTransactionReceipt` and `L1ContractCallTransactionReceipt` provide additional functionality specific to ETH deposit transactions and L1 contract call transactions, respectively.\n\n2. **Question:** How does the `waitForL2` method work in the `L1EthDepositTransactionReceipt` and `L1ContractCallTransactionReceipt` classes?\n\n   **Answer:** The `waitForL2` method in both classes is used to wait for the transaction to arrive and be executed on L2. It takes an L2 provider or signer, an optional number of confirmations, and an optional timeout as arguments. The method returns a promise that resolves to an object containing the completion status, the L1-to-L2 message, and optionally the L2 transaction receipt.\n\n3. **Question:** What is the purpose of the `monkeyPatchWait`, `monkeyPatchEthDepositWait`, and `monkeyPatchContractCallWait` methods in the `L1TransactionReceipt` class?\n\n   **Answer:** These methods are used to replace the `wait` function of a `ContractTransaction` object with a custom implementation that returns an `L1TransactionReceipt` or one of its derived classes (`L1EthDepositTransactionReceipt` or `L1ContractCallTransactionReceipt`). This allows for additional functionality to be added to the transaction receipt objects."
}