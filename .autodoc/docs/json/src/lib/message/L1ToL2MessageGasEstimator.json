{
  "fileName": "L1ToL2MessageGasEstimator.ts",
  "filePath": "src/lib/message/L1ToL2MessageGasEstimator.ts",
  "url": "https://github.com/offchainlabs/arbitrum-sdk/src/lib/message/L1ToL2MessageGasEstimator.ts",
  "summary": "The `L1ToL2MessageGasEstimator` class in the `arbitrum-sdk` project provides methods for estimating the gas parameters required for sending an L1-to-L2 message. The class is initialized with an L2 provider and provides several methods for estimating gas parameters for L1-to-L2 messages. \n\nThe `estimateSubmissionFee` method estimates the submission fee for a new retryable transaction. The method takes a call data size and an optional `PercentIncrease` object as input. The `PercentIncrease` object can be used to override the default percentage increase for the submission fee. The method returns the maximum submission cost for the retryable transaction.\n\nThe `estimateRetryableTicketGasLimit` method estimates the amount of L2 gas required for putting the transaction in the L2 inbox and executing it. The method takes a `L1ToL2MessageNoGasParams` object and an optional `senderDeposit` value as input. The `senderDeposit` value is used to provide a dummy amount of call value that will definitely be more than needed. The method returns the estimated gas limit for the retryable transaction.\n\nThe `estimateMaxFeePerGas` method estimates the maximum fee per gas for the L2 transaction. The method takes an optional `PercentIncrease` object as input. The `PercentIncrease` object can be used to override the default percentage increase for the maximum fee per gas. The method returns the estimated maximum fee per gas for the L2 transaction.\n\nThe `estimateAll` method provides an estimate for the gas limit, gas price, and submission price for sending an L1-to-L2 message. The method takes a `L1ToL2MessageNoGasParams` object, the current L1 base fee, an L1 provider, and an optional `GasOverrides` object as input. The `GasOverrides` object can be used to override the default gas limit, maximum submission fee, maximum fee per gas, and deposit values. The method returns a `L1ToL2MessageGasParams` object containing the estimated gas limit, maximum submission cost, maximum fee per gas, and deposit.\n\nThe `populateFunctionParams` method populates the gas parameters into a transaction request. The method takes a `dataFunc` function, an L1 provider, and an optional `GasOverrides` object as input. The `dataFunc` function is used to make an L1-to-L2 transaction and is called twice. The first call is made with dummy values to trigger a special revert containing the real parameters. The second call is made with the real parameters to form the final data to be submitted. The method returns an object containing the gas estimates, retryable data, and real data for the transaction.\n\nOverall, the `L1ToL2MessageGasEstimator` class provides a convenient way to estimate the gas parameters required for sending an L1-to-L2 message. The class can be used in the larger project to estimate gas parameters for retryable transactions and populate the gas parameters into transaction requests.",
  "questions": "1. What is the purpose of this code file?\n- This code file contains a class called `L1ToL2MessageGasEstimator` which provides methods for estimating gas parameters for sending an L1->L2 message.\n\n2. What are some of the default values used in the gas estimation process?\n- The default submission fee percent increase is 300%, the default gas price percent increase is 200%, and the default gas limit percent increase is 0.\n\n3. What is the purpose of the `populateFunctionParams` method?\n- The `populateFunctionParams` method takes a function that will internally make an L1->L2 transaction, and populates the gas parameters estimated by the `L1ToL2MessageGasEstimator` class into a transaction request."
}